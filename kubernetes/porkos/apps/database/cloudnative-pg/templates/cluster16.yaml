---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres-16-immich
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "5"
spec:
  instances: 3
  imageName: ghcr.io/tensorchord/vchord-postgres:pg16-v0.3.0
  enableSuperuserAccess: true
  primaryUpdateStrategy: unsupervised
  storage:
    size: 50Gi
    storageClass: openebs-hostpath
  superuserSecret:
    name: cloudnative-pg
  postgresql:
      parameters:
        max_connections: "600"
        shared_buffers: 512MB
      shared_preload_libraries:
        - "vchord.so"
  resources:
    requests:
      cpu: 500m
    limits:
      memory: 4Gi
  monitoring:
    enablePodMonitor: true
  backup:
    retentionPolicy: 7d
    barmanObjectStore: &barmanObjectStore
      data:
        compression: bzip2
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://cnpg/
      endpointURL: https://fb30c9a83696a7cb166c3c13facf6454.r2.cloudflarestorage.com
      serverName: &currentCluster postgres16-immich-v1
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg
          key: aws-access-key-id
        secretAccessKey:
          name: cloudnative-pg
          key: aws-secret-access-key
  # Note: previousCluster needs to be set to the name of the previous
  # cluster when recovering from an existing cnpg cluster
  bootstrap:
    initdb:
      database: immich
      owner: immich
      postInitApplicationSQL:
        - ALTER USER immich WITH SUPERUSER;
  #   recovery:
  #     source: postgres16-immich-v1
  # # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name: *previousCluster
  #     barmanObjectStore:
  #       <<: *barmanObjectStore
  #       serverName: *previousCluster
