argo-cd:
  global:
    domain: argocd.porkboi.io
    
  configs:
    cm:
      helm.valuesFileSchemes: >-
        secrets+age-import, secrets+age-import-kubernetes,
        secrets, secrets+literal,
        https
      url: "https://argocd.porkboi.io"
      exec.enabled: true
      admin.enabled: false
      kustomize.buildOptions: --enable-alpha-plugins --enable-exec
      dex.config: |
        connectors:
        - config:
            issuer: https://id.porkboi.io/application/o/argocd/
            clientID: 5gRWlq2Ne2CYKhSOTE0otkykQF062QmK3rprMhse
            clientSecret: $dex.authentik.clientSecret
            insecureEnableGroups: true
            scopes:
              - openid
              - profile
              - email
          name: authentik
          type: oidc
          id: authentik
      resource.ignoreResourceUpdatesEnabled: true
      resource.customizations.ignoreDifferences.deviceplugin.intel.com_GpuDevicePlugin: |
        jqPathExpressions:
          - '.metadata.annotations'
          - '.spec.resourceManager'
          - '.spec.tolerations'
      resource.customizations.ignoreDifferences.external-secrets.io_ExternalSecret: |
        jqPathExpressions:
          - '.spec.dataFrom[]?.find.conversionStrategy'
          - '.spec.dataFrom[]?.find.decodingStrategy'
          - '.spec.data[]?.remoteRef.decodingStrategy'
          - '.spec.data[]?.remoteRef.conversionStrategy'
          - '.spec.data[]?.remoteRef.metadataPolicy'
      resource.customizations.ignoreResourceUpdates.all: |
        jsonPointers:
          - /status
          - /metadata/generation
      resource.customizations.ignoreResourceUpdates.external-secrets.io_ExternalSecret: |
        jsonPointers:
        - /status/refreshTime
        # JQ equivalent of the above:
        # jqPathExpressions:
        # - .status.refreshTime
    params:
      server.insecure: true
      controller.diff.server.side: true
    rbac:
      policy.csv: |
        p, role:admin, exec, create, */*, allow
        g, authentik Admins, role:admin
      scopes: "[groups]"

    secret:
      createSecret: false

  controller:
    replicas: 2
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  dex:
    enabled: true
    replicas: 2

  externalRedis:
    # -- External Redis server host
    host: dragonfly.database.svc.cluster.local

  redis:
    enabled: false

  server:
    replicas: 2
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    ingress:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      ingressClassName: nginx
      extraTls:
        - hosts:
          - argocd.porkboi.io

  repoServer:
    env:
      - name: HELM_PLUGINS
        value: /gitops-tools/helm-plugins/
      - name: HELM_SECRETS_CURL_PATH
        value: /gitops-tools/curl
      - name: HELM_SECRETS_SOPS_PATH
        value: /gitops-tools/sops
      - name: HELM_SECRETS_VALS_PATH
        value: /gitops-tools/vals
      - name: HELM_SECRETS_KUBECTL_PATH
        value: /gitops-tools/kubectl
      - name: HELM_SECRETS_BACKEND
        value: sops
      # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
      - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
        value: "true"
      - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
        value: "false"
      - name: HELM_SECRETS_WRAPPER_ENABLED
        value: "true"
      - name: HELM_SECRETS_DECRYPT_SECRETS_IN_TMP_DIR
        value: "true"
      - name: HELM_SECRETS_HELM_PATH
        value: /usr/local/bin/helm
      - name: SOPS_AGE_KEY_FILE # For age
        value: /helm-secrets-private-keys/key.txt

    volumes:
      - name: gitops-tools
        emptyDir: {}
      # kubectl create secret generic helm-secrets-private-keys --from-file=key.asc=assets/gpg/private2.gpg
      - name: helm-secrets-private-keys
        secret:
          secretName: sops-age
    volumeMounts:
      - mountPath: /gitops-tools
        name: gitops-tools
      - mountPath: /usr/local/sbin/helm
        subPath: helm
        name: gitops-tools
      - mountPath: /helm-secrets-private-keys/
        name: helm-secrets-private-keys
    initContainers:
      - name: download-tools
        image: alpine:latest
        imagePullPolicy: IfNotPresent
        command: [sh, -ec]
        env:
          - name: HELM_SECRETS_VERSION
            value: "4.6.1"
          - name: KUBECTL_VERSION
            value: "1.30.2"
          - name: VALS_VERSION
            value: "0.37.3"
          - name: SOPS_VERSION
            value: "3.9.0"
        args:
          - |
            mkdir -p /gitops-tools/helm-plugins

            GO_ARCH=$(uname -m | sed -e 's/x86_64/amd64/')
            wget -qO /gitops-tools/curl https://github.com/moparisthebest/static-curl/releases/latest/download/curl-${GO_ARCH}

            GO_ARCH=$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/') && \
            wget -qO /gitops-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/${GO_ARCH}/kubectl
            wget -qO /gitops-tools/sops https://github.com/getsops/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.${GO_ARCH}
            wget -qO- https://github.com/helmfile/vals/releases/download/v${VALS_VERSION}/vals_${VALS_VERSION}_linux_${GO_ARCH}.tar.gz | tar zxv -C /gitops-tools vals
            wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /gitops-tools/helm-plugins -xzf-

            chmod +x /gitops-tools/*
            cp /gitops-tools/helm-plugins/helm-secrets/scripts/wrapper/helm.sh /gitops-tools/helm
        volumeMounts:
          - mountPath: /gitops-tools
            name: gitops-tools
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  applicationSet:
    replicas: 2
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true