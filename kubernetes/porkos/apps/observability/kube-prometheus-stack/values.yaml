kube-prometheus-stack:
  crds:
    enabled: true
    upgradeJob:
      enabled: true
      forceConflicts: true
  cleanPrometheusOperatorObjectNames: true
  alertmanager:
    ingress:
      enabled: true
      annotations:      
        nginx.ingress.kubernetes.io/auth-url: |-
            http://authentik-server.default.svc.cluster.local:80/outpost.goauthentik.io/auth/nginx
        nginx.ingress.kubernetes.io/auth-signin: |-
            https://alertmanager.porkboi.io/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-response-headers: |-
            Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
        nginx.ingress.kubernetes.io/auth-snippet: |
            proxy_set_header X-Forwarded-Host $http_host;
      ingressClassName: nginx
      hosts: ["alertmanager.porkboi.io"]
      pathType: Prefix
    alertmanagerSpec:
      alertmanagerConfiguration:
        name: alertmanager
        global:
          resolveTimeout: 5m
      externalUrl: https://alertmanager.porkboi.io
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: rook-ceph-block
            resources:
              requests:
                storage: 1Gi
  kubeEtcd:
    service:
      selector:
        component: kube-apiserver
  kubeProxy:
    enabled: false
  prometheus:
    ingress:
      enabled: true
      annotations:      
        nginx.ingress.kubernetes.io/auth-url: |-
            http://authentik-server.default.svc.cluster.local:80/outpost.goauthentik.io/auth/nginx
        nginx.ingress.kubernetes.io/auth-signin: |-
            https://metrics.porkboi.io/outpost.goauthentik.io/start?rd=$scheme://$http_host$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-response-headers: |-
            Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
        nginx.ingress.kubernetes.io/auth-snippet: |
            proxy_set_header X-Forwarded-Host $http_host;
      ingressClassName: nginx
      hosts: ["metrics.porkboi.io"]
      pathType: Prefix
    prometheusSpec:
      scrapeInterval: 1m # Must match interval in Grafana Helm chart
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      scrapeConfigSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      enableAdminAPI: true
      walCompression: true
      enableFeatures:
        - memory-snapshot-on-shutdown
      retention: 14d
      retentionSize: 70GB
      resources:
        requests:
          cpu: 100m
        limits:
          memory: 2000Mi
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: openebs-hostpath
            resources:
              requests:
                storage: 50Gi
  prometheus-node-exporter:
    fullnameOverride: node-exporter
    prometheus:
      monitor:
        enabled: true
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels: ["__meta_kubernetes_pod_node_name"]
            targetLabel: kubernetes_node
  kube-state-metrics:
    fullnameOverride: kube-state-metrics
    metricLabelsAllowlist:
      - pods=[*]
      - deployments=[*]
      - persistentvolumeclaims=[*]
    prometheus:
      monitor:
        enabled: true
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels: ["__meta_kubernetes_pod_node_name"]
            targetLabel: kubernetes_node
  grafana:
    enabled: false
    forceDeployDashboards: true
  additionalPrometheusRulesMap:
    dockerhub-rules:
      groups:
        - name: dockerhub
          rules:
            - alert: DockerhubRateLimitRisk
              annotations:
                summary: Kubernetes cluster Dockerhub rate limit risk
              expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
              labels:
                severity: critical
    oom-rules:
      groups:
        - name: oom
          rules:
            - alert: OomKilled
              annotations:
                summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
              expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
              labels:
                severity: critical